import {stdout} from 'process';
import {getGlobalVisitor} from '../src/parser';
import {SonicWeaveFunction} from '../src/stdlib';
import {expressionToString} from '../src/ast';

const visitor = getGlobalVisitor();

stdout.write('# SonicWeave standard library\n');
stdout.write(
  '<!-- This file has been auto-generated by `npm run autodoc` i.e. scripts/builtin-docs.ts !-->\n\n'
);

const builtins: SonicWeaveFunction[] = [];
const prelude: SonicWeaveFunction[] = [];

for (const riff of visitor.immutables.values()) {
  if (typeof riff === 'function') {
    const node = riff.__node__;
    if (node.type === 'FunctionDeclaration' && !node.body.length) {
      builtins.push(riff);
    } else {
      prelude.push(riff);
    }
  }
}

function generateDocs(riffs: SonicWeaveFunction[]) {
  riffs.sort((a, b) =>
    a.name.localeCompare(b.name, 'en', {sensitivity: 'base'})
  );
  for (const riff of riffs) {
    const node = riff.__node__;
    const param_names = node.parameters.parameters.map(
      p =>
        '*' +
        (p.type === 'Parameter' ? p.id : '[...]') +
        (p.defaultValue ? ' = ' + expressionToString(p.defaultValue) : '') +
        '*'
    );
    if (node.parameters.rest) {
      param_names.push('*...' + node.parameters.rest.id + '*');
    }
    stdout.write('### ' + riff.name + '(' + param_names.join(', ') + ')\n');
    stdout.write(riff.__doc__ + '\n\n');
  }
}

stdout.write('## Built-in functions\n\n');
generateDocs(builtins);

stdout.write('## Prelude functions\n\n');
generateDocs(prelude);
